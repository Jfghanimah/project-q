Engineering Task List

Done!
     Set up custom user model (CustomUser) in the users app using email authentication. - Hard
    Implemented CustomUserManager and CustomUser classes.
    Configured AUTH_USER_MODEL in settings.py.
    Moved List and Rating models to users/models.py to eliminate circular dependencies. - Medium
    Updated relationships to use string references and settings.AUTH_USER_MODEL.
    Updated users/admin.py to register CustomUser, List, and Rating models. - Easy
    Created CustomUserAdmin class for better admin interface.
    Adjusted templates to reflect new user model and forms. - Medium
    Modified login.html, register.html, and profile.html to use updated fields.
    Resolved initial issues with missing database tables.

In Progress:
    Fix user registration and login functionality. - Medium
    Implementing profile editing functionality. - Medium
        -Creating edit_profile view and template.
        -Adding CustomUserChangeForm for profile updates?    

To-Do:
High Priority:
    Check if its worth Refactoring to make sure were doing the API part properly to support apps in the future.
    Update all references to the user model across the project. - Medium
        -Replace direct imports of User with get_user_model() or settings.AUTH_USER_MODEL. or something like that
        -User registration, login, logout.
        -Profile viewing and editing.
        -List and rating functionalities.
    Implement user authentication features. - Medium
        -Password reset functionality.
        -Email verification upon registration.

Medium Priority:
    Develop GameList functionality for users to manage their game collections. - Medium
        -Create views and templates for creating, editing, and viewing lists.
        -Ensure games can be added to and removed from lists.
    Implement Rating and Review features for games. - Medium
        -Allow users to rate and review games.
        -Display average ratings and reviews on game pages.
    Set up UserFollower system for social features. - Medium
        -Enable users to follow and unfollow each other.
        -Display follower and following counts on profiles.
    Create Notification and Activity systems. - Hard
        -Notify users of new followers, comments, or other interactions.
        -Track user activities for display on profiles or dashboards.

Low Priority:
    Improve the UI/UX of templates and overall site design. - Medium
        -Enhance styling with CSS and responsive design.
        -Add user-friendly messages and form validations.
    Optimize models and database queries for performance. - Medium
        -Review queries for efficiency.
        -Implement indexing where appropriate.
    Add unit and integration tests for models, views, and forms. - Hard
    Document the codebase and provide setup instructions. - Easy
        -Write README files and comments.
        -Create developer onboarding guides.

Extra Features:
    Implement search functionality for games and users. - Medium
        -Allow users to search for games by title or genre.
        -Enable user search by username or email.
    Add social media integration. - Hard
        -Allow users to share reviews or lists on social platforms.
        -Implement social login options (e.g., Google, Facebook).
    Develop an API for external access. - Hard
        -Provide endpoints for key functionalities.
        -Secure the API with proper authentication.
    Deploy the application to a production environment. - Hard
        -Choose hosting (e.g., Heroku, AWS, DigitalOcean).
        -Configure the production database and static files.
    Investigate allowing users to showcase rank and stuff like that on the site?
    

Notes:
    Prioritize fixing existing bugs before adding new features.
    Maintain code quality with consistent styling and documentation.
